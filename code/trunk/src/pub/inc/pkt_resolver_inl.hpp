/*#############################################################################
 * 文件名   : pkt_resolver_inl.hpp
 * 创建人   : teck_zhou	
 * 创建时间 : 2014年01月03日
 * 文件描述 : TcpMonitor类声明
 * 版权声明 : Copyright (c) 2014 BroadInter. All rights reserved.
 * ##########################################################################*/

#ifndef BROADINTER_PKT_RESOLVER_INL
#define BROADINTER_PKT_RESOLVER_INL

#include "pkt_resolver.hpp"
#include "tmas_assert.hpp"

namespace BroadInter
{

namespace PR
{

#define IP_MF			0x2000	// Flag: "More Fragments"
#define IP_OFFSET		0x1FFF	// "Fragment Offset" part
 
/*------------------------------------------------------------------------------
 * 描  述: 获取IP层源地址（网络字节顺序）
 * 参  数:
 * 返回值: IP层源地址（网络字节顺序）
 * 修  改:
 *   时间 2014年01月21日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/ 
inline uint32 GetSourceIpN(char* ip_hdr)
{
    return ((iphdr*)ip_hdr)->saddr;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP层源地址（主机字节顺序）
 * 参  数:
 * 返回值: IP层源地址（主机字节顺序）
 * 修  改:
 *   时间 2014年01月21日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/ 
inline uint32 GetSourceIpH(char* ip_hdr)
{
    return ntohl(GetSourceIpN(ip_hdr));
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP层目的地址（网络字节顺序）
 * 参  数:
 * 返回值: IP层目的地址（网络字节顺序）
 * 修  改:
 *   时间 2014年01月21日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/ 
inline uint32 GetDestIpN(char* ip_hdr)
{
    return ((iphdr*)ip_hdr)->daddr;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP层目的地址（主机字节顺序）
 * 参  数:
 * 返回值: IP层目的地址（主机字节顺序）
 * 修  改:
 *   时间 2014年01月21日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/ 
inline uint32 GetDestIpH(char* ip_hdr)
{
    return ntohl(GetDestIpN(ip_hdr));
}

/*------------------------------------------------------------------------------
 * 描  述: 获取分片报文ID
 * 参  数:
 * 返回值: 报文ID
 * 修  改:
 *   时间 2014年01月07日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetFragPktId(char* ip_hdr)
{
	// IP头分片相关字段
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// |         Identification        |R|DF|MF|      Fragment Offset      | 
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
	// |<--------------16------------->|<--3-->|<-----------13------------>| 

	return ntohs(((iphdr*)ip_hdr)->id);
}

inline void SetFragPktId(char* ip_hdr, uint16 pkt_id)
{

}

/*------------------------------------------------------------------------------
 * 描  述: 获取分片在报文中的偏移
 * 参  数:
 * 返回值: 分片偏移
 * 修  改:
 *   时间 2014年01月07日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetFragOffset(char* ip_hdr)
{
	// IP头分片相关字段
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// |         Identification        |R|DF|MF|      Fragment Offset      | 
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
	// |<--------------16------------->|<--3-->|<-----------13------------>| 

	return (ntohs(((iphdr*)ip_hdr)->frag_off) & IP_OFFSET) * 8;
}

/*------------------------------------------------------------------------------
 * 描  述: 设置分片偏移值
 * 参  数: [in] ip_hdr IP头
 *         [in] offset 偏移值
 * 返回值: 
 * 修  改:
 *   时间 2014年01月07日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline void SetFragOffset(char* ip_hdr, uint16 offset)
{
	iphdr* hdr = (iphdr*)ip_hdr;
	hdr->frag_off =  htons( ntohs(hdr->frag_off) | (offset / 8 & IP_OFFSET));
}

/*------------------------------------------------------------------------------
 * 描  述: 获取分片标志
 * 参  数:
 * 返回值: 分片标志
 * 修  改:
 *   时间 2014年01月07日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline bool GetMfFlag(char* ip_hdr)
{
	// IP头分片相关字段
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// |         Identification        |R|DF|MF|      Fragment Offset      | 
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
	// |<--------------16------------->|<--3-->|<-----------13------------>| 

	return (ntohs(((iphdr*)ip_hdr)->frag_off) & IP_MF) != 0;
}

/*------------------------------------------------------------------------------
 * 描  述: 设置分片标志
 * 参  数: [in] ip_hdr IP头
 *         [in] flag 标志值
 * 返回值: 
 * 修  改:
 *   时间 2014年01月07日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline void SetMfFlag(char* ip_hdr, bool flag)
{
	iphdr* hdr = (iphdr*)ip_hdr;
	
	if (flag)
	{
		hdr->frag_off =  htons(ntohs(hdr->frag_off) | 0x2000);
	}
	else
	{
		hdr->frag_off =  htons(ntohs(hdr->frag_off) & 0x1FFF);
	}
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP头长度
 * 参  数: [in] ip_hdr ip头指针
 * 返回值: 长度
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetIpHdrLen(char* ip_hdr)
{
	return ((iphdr*)ip_hdr)->ihl * 4;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP承载数据长度
 * 参  数: [in] ip_hdr ip头指针
 * 返回值: 长度
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetIpDataLen(char* ip_hdr)
{
	return ntohs(((iphdr*)ip_hdr)->tot_len) - GetIpHdrLen(ip_hdr);
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP报文总长度，包括IP头和IP承载数据长度
 * 参  数: [in] ip_hdr ip头指针
 * 返回值: 长度
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetIpTotalLen(char* ip_hdr)
{
	return ntohs(((iphdr*)ip_hdr)->tot_len);
}

/*------------------------------------------------------------------------------
 * 描  述: 设置IP总长度
 * 参  数: [out] ip_hdr ip头指针
 *         [in] total_len 长度
 * 返回值: 
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline void SetIpTotalLen(char* ip_hdr, uint16 total_len)
{
	((iphdr*)ip_hdr)->tot_len = htons(total_len);
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP承载协议
 * 参  数: [in] ip_hdr ip头指针
 * 返回值: 协议类型
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint8 GetIpHdrProt(char* ip_hdr)
{
	return ((iphdr*)ip_hdr)->protocol;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取IP协议版本
 * 参  数: [in] ip_hdr ip头指针
 * 返回值: 协议版本
 * 修  改:
 *   时间 2014年01月23日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint8 GetIpVersion(char* ip_hdr)
{
	return ((iphdr*)ip_hdr)->version;
}

/*------------------------------------------------------------------------------
 * 描  述: ACK标志位是否置位
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 是/否
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline bool IsTcpAckSet(char* l4_hdr)
{
	return ((tcphdr*)l4_hdr)->ack;
}

/*------------------------------------------------------------------------------
 * 描  述: ACK标志位是否置位
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 是/否
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline bool IsTcpSynSet(char* l4_hdr)
{
	return ((tcphdr*)l4_hdr)->syn;
}

/*------------------------------------------------------------------------------
 * 描  述: ACK标志位是否置位
 * 参  数: [in] l4_hdr TCP分刚? * 返回值: 是/否
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline bool IsTcpFinSet(char* l4_hdr)
{
	return ((tcphdr*)l4_hdr)->fin;
}

/*------------------------------------------------------------------------------
 * 描  述: ACK标志位是否置位
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 是/否
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline bool IsTcpRstSet(char* l4_hdr)
{
	return ((tcphdr*)l4_hdr)->rst;
}

/*------------------------------------------------------------------------------
 * 描  述: ACK标志位是否置位
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 是/否
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint32 GetTcpSeqNum(char* l4_hdr)
{
	return ntohl(((tcphdr*)l4_hdr)->seq);
}

/*------------------------------------------------------------------------------
 * 描  述: ACK标志位是否置位
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 是/否
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint32 GetTcpAckNum(char* l4_hdr)
{
	return ntohl(((tcphdr*)l4_hdr)->ack_seq);
}

/*------------------------------------------------------------------------------
 * 描  述: 获取TCP头部长度
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 头部长度
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetTcpHdrLen(char* l4_hdr)
{
	return ((tcphdr*)l4_hdr)->doff * 4;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取TCP源端口(网络字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 源端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetTcpSrcPortN(char* l4_hdr)
{
	return ((tcphdr*)l4_hdr)->source;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取TCP源端口(主机字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 源端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetTcpSrcPortH(char* l4_hdr)
{
	return ntohs(GetTcpSrcPortN(l4_hdr));
}

/*------------------------------------------------------------------------------
 * 描  述: 获取TCP目的端口(网络字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 目的端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetTcpDstPortN(char* l4_hdr)
{
	return ((tcphdr*)l4_hdr)->dest;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取TCP目的端口(主机字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值:目的端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetTcpDstPortH(char* l4_hdr)
{
	return ntohs(GetTcpDstPortN(l4_hdr));
}

/*------------------------------------------------------------------------------
 * 描  述: 获取UDP源端口(网络字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 源端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetUdpSrcPortN(char* l4_hdr)
{
	return ((udphdr*)l4_hdr)->source;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取UDP源端口(主机字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 源端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetUdpSrcPortH(char* l4_hdr)
{
	return ntohs(GetUdpSrcPortN(l4_hdr));
}

/*------------------------------------------------------------------------------
 * 描  述: 获取UDP目的端口(网络字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 目的端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetUdpDstPortN(char* l4_hdr)
{
	return ((udphdr*)l4_hdr)->dest;
}

/*------------------------------------------------------------------------------
 * 描  述: 获取UDP目的端口(主机字节序)
 * 参  数: [in] l4_hdr TCP头指针
 * 返回值: 目的端口
 * 修  改:
 *   时间 2014年01月22日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline uint16 GetUdpDstPortH(char* l4_hdr)
{
	return ntohs(GetUdpDstPortN(l4_hdr));
}

/*------------------------------------------------------------------------------
 * 描  述: IP头部的CRC校验
 * 参  数:
 * 返回值: bool 校验和正确
 *         false 检验和错误
 * 修  改:
 *   时间 2014年01月07日
 *   作者 teck_zhou
 *   描述 创建
 -----------------------------------------------------------------------------*/
inline bool CheckIpHeaderCrc(char* ip_hdr, uint16 header_len)
{
	uint16* hdr = (uint16*)(ip_hdr);

	uint32 cksum = 0;

	while( header_len > 1 ) /* IP-hdr must be an integral number of 4 byte words */
   	{
		cksum += *hdr++;
		header_len  -= 2;
   	}

   	cksum  = (cksum >> 16) + (cksum & 0x0000ffff);
   	cksum += (cksum >> 16);

	//uint32 sum = ~cksum;

   	if ((uint16)(~cksum) == 0) return true;

   	return false;
}

} // namespace PR

} // namespace BroadInter

#endif
