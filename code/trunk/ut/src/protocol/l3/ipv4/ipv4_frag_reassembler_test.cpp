/*#############################################################################
 * 文件名   : ipv4_frag_reassembler_test.cpp
 * 创建人   : teck_zhou
 * 创建时间 : 2014年04月02日
 * 文件描述 : Ipv4FragReassemblerTest实现
 * 版权声明 : Copyright (c) 2014 BroadInter. All rights reserved.
 * ##########################################################################*/

#include <glog/logging.h>
#include <iostream>
#include <fstream>

#include "ipv4_frag_reassembler_test.hpp"
#include "ipv4_monitor.hpp"

#include "eth_monitor.hpp"
#include "pkt_parser.hpp"

namespace BroadInter
{
//==============================================================================
// Test class implementation
//==============================================================================

Ipv4FragReassemblerTest::Ipv4FragReassemblerTest()
{
}

Ipv4FragReassemblerTest::~Ipv4FragReassemblerTest()
{
}

void Ipv4FragReassemblerTest::SetUp()
{

}

void Ipv4FragReassemblerTest::TearDown()
{

}

//==============================================================================
// Test case implementation
//==============================================================================

/*------------------------------------------------------------------------------
 * 描述: 解析处理Ip分片报文
 *----------------------------------------------------------------------------*/
TEST_F(Ipv4FragReassemblerTest, frag_packet)
{
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpMfFlag(true);
	ip_constructor1.SetIpId(0x20);

	PktInfoSP pkt_info_1(new PktInfo(1024));
	dummy_constructor1.GetPacket((void**)(&(pkt_info_1->pkt.buf)), (size_t*)(&(pkt_info_1->pkt.len)));

	ASSERT_TRUE(ParsePktEthInfo(pkt_info_1));
	ASSERT_TRUE(ParsePktIpInfo(false, pkt_info_1));

	Ipv4MonitorType ipv4_monitor;
	Ipv4FragReassembler reassembler(&ipv4_monitor, pkt_info_1);

	reassembler.ProcessFragPkt(pkt_info_1);

	ASSERT_TRUE(reassembler.pkt_frags_.size() == 1);

	//delete[] pkt_info_1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(30);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpOffSet(50);
	ip_constructor2.SetIpId(0x20);

	PktInfoSP pkt_info_2(new PktInfo(1024));
	dummy_constructor2.GetPacket((void**)(&(pkt_info_2->pkt.buf)), (size_t*)(&(pkt_info_2->pkt.len)));

	ASSERT_TRUE(ParsePktEthInfo(pkt_info_2));
	ASSERT_TRUE(ParsePktIpInfo(false, pkt_info_2));

	reassembler.ProcessFragPkt(pkt_info_2);

	ASSERT_TRUE(reassembler.pkt_frags_.size() == 2);

	//delete[] pkt_info_2->pkt.buf;
}

TEST_F(Ipv4FragReassemblerTest, real_frag_packet)
{
	char packet1[] = {
		0xf8, 0x0f, 0x41, 0x0d, 0x5e, 0x0f, 0x90, 0x94, 0xe4, 0xa7, 0x5c, 0x86, 0x08, 0x00, 0x45, 0x00,
		0x05, 0xd4, 0x8d, 0x36, 0x20, 0x00, 0x74, 0x06, 0x81, 0xde, 0x3b, 0x2a, 0x15, 0x62, 0xc0, 0xa8,
		0x00, 0xdb, 0x56, 0x34, 0x1d, 0x2c, 0xd2, 0x5a, 0xb3, 0x62, 0xab, 0x5c, 0xe7, 0xc6, 0x50, 0x10,
		0xfa, 0x53, 0x62, 0x29, 0x00, 0x00, 0xab, 0x2c, 0xc4, 0xa5, 0xab, 0x87, 0xef, 0xf3, 0x7e, 0xae,
		0x1f, 0xc3, 0x7e, 0x33, 0xd2, 0x75, 0x6e, 0x71, 0x07, 0xe6, 0xe6, 0xd4, 0x4e, 0x8f, 0x77, 0xe7,
		0x9c, 0xf3, 0x14, 0x18, 0x68, 0x12, 0xd2, 0xa2, 0x3b, 0x01, 0x8b, 0x65, 0x36, 0xbb, 0xf6, 0x75,
		0x4f, 0x87, 0x28, 0x46, 0x82, 0xa0, 0x84, 0x0b, 0x7c, 0x52, 0x9b, 0x40, 0xb3, 0x3d, 0x60, 0x40,
		0x65, 0x39, 0x1d, 0x09, 0x62, 0xd6, 0x72, 0x5c, 0x51, 0x94, 0x62, 0x08, 0x02, 0x47, 0x8f, 0xcf,
		0xef, 0xbf, 0x99, 0x10, 0x63, 0x11, 0xab, 0x2a, 0xdf, 0x48, 0x5c, 0x65, 0x9c, 0xf2, 0x92, 0xf3,
		0x11, 0x19, 0x54, 0xb0, 0xb2, 0x24, 0x42, 0x6e, 0x1d, 0x18, 0x21, 0x1b, 0x79, 0xf4, 0xec, 0xfb,
		0x93, 0xad, 0x33, 0x92, 0x28, 0xb1, 0xa2, 0x90, 0x0b, 0x1a, 0x39, 0x22, 0x31, 0x97, 0xe0, 0xea,
		0x36, 0x5a, 0x2c, 0xe2, 0xb8, 0x41, 0x67, 0x19, 0x19, 0x80, 0xf2, 0x73, 0x84, 0x58, 0x2d, 0xcd,
		0xe2, 0xa0, 0x61, 0x64, 0xbc, 0x11, 0x1b, 0xeb, 0x17, 0xc1, 0x13, 0x6d, 0xbc, 0xf5, 0xbf, 0x70,
		0x8d, 0x0f, 0x74, 0x6b, 0x15, 0x95, 0x29, 0x1f, 0xa5, 0xdf, 0xd3, 0x1a, 0x3c, 0x50, 0xe6, 0xeb,
		0x2a, 0x04, 0x5a, 0xea, 0xe1, 0xc5, 0xf4, 0x77, 0xff, 0x08, 0xcc, 0xae, 0xc7, 0x1f, 0x70, 0x8b,
		0x9f, 0x28, 0x8e, 0x04, 0xa3, 0x0e, 0xc2, 0x0a, 0x9a, 0xf4, 0x3c, 0xf4, 0x8d, 0xe9, 0xda, 0x7b,
		0x6c, 0xcd, 0x37, 0xf8, 0xf8, 0xd7, 0xa3, 0x20, 0x75, 0xb1, 0xc9, 0xe7, 0x68, 0x51, 0x90, 0x0d,
		0xa4, 0x88, 0x62, 0x73, 0x24, 0x89, 0x8d, 0xad, 0xad, 0xc8, 0x32, 0x9e, 0xf3, 0xc9, 0x37, 0xda,
		0x78, 0x3d, 0x68, 0xf7, 0x7f, 0x08, 0xfd, 0xeb, 0xdc, 0x19, 0x10, 0xa7, 0x6b, 0xf1, 0x40, 0x94,
		0x7e, 0xdd, 0xee, 0x4c, 0x9f, 0xde, 0x35, 0xb9, 0x12, 0x7d, 0x87, 0xe7, 0xcf, 0x3f, 0x24, 0x74,
		0x80, 0x79, 0xcf, 0x2b, 0x11, 0x71, 0x10, 0xaa, 0x48, 0x24, 0x12, 0x0e, 0x46, 0x9e, 0x73, 0xe7,
		0xf2, 0x42, 0x8d, 0x18, 0x25, 0x65, 0x04, 0x7d, 0x37, 0x18, 0x8c, 0x8e, 0xd2, 0x14, 0x82, 0x0f,
		0x5e, 0xc8, 0xd5, 0xd4, 0x5b, 0xa0, 0xb5, 0x91, 0xcb, 0xfc, 0xf9, 0xa4, 0x72, 0x21, 0x84, 0x9d,
		0x78, 0x56, 0x99, 0x65, 0x04, 0xba, 0x0b, 0x54, 0x12, 0xd1, 0x68, 0x40, 0x45, 0xc9, 0x12, 0xe7,
		0x5a, 0x46, 0x82, 0xd4, 0xe6, 0x82, 0x14, 0x16, 0xb0, 0xad, 0x17, 0x51, 0x43, 0x3b, 0x42, 0x65,
		0xa1, 0x29, 0xc3, 0x53, 0x8c, 0x76, 0x01, 0x05, 0x10, 0xe3, 0x67, 0xbf, 0x3a, 0x61, 0x08, 0x69,
		0x5c, 0xfe, 0xfd, 0xe4, 0x31, 0x09, 0xd1, 0xda, 0xf4, 0xbd, 0xb5, 0xec, 0xb4, 0x63, 0xdb, 0xe3,
		0xdf, 0x64, 0xb5, 0xb8, 0x8c, 0x2f, 0x6b, 0xf1, 0x45, 0x19, 0x40, 0x6c, 0xa2, 0xf8, 0x8d, 0xb2,
		0x70, 0xa2, 0x37, 0x70, 0x3c, 0x95, 0x23, 0xd5, 0xa2, 0xf5, 0xec, 0xb5, 0x96, 0xf8, 0x8e, 0x8d,
		0xbb, 0x3e, 0x0b, 0x09, 0xb4, 0x8b, 0xda, 0xb5, 0x27, 0xcf, 0x3e, 0xa1, 0x81, 0x6a, 0xd9, 0xc2,
		0x96, 0x5a, 0xfc, 0x70, 0x40, 0x61, 0x28, 0x6b, 0xb4, 0x9f, 0xfc, 0xfb, 0xf8, 0xbe, 0xa8, 0xfe,
		0xc6, 0xb7, 0x11, 0x69, 0x64, 0x52, 0x85, 0xbf, 0xc4, 0x69, 0x66, 0x5f, 0x74, 0x7b, 0xd1, 0x12,
		0x7e, 0x27, 0xa6, 0x9a, 0xbb, 0xb5, 0x04, 0x45, 0x80, 0x58, 0x7a, 0xb8, 0x50, 0x45, 0x83, 0x1a,
		0xaf, 0x86, 0x65, 0xb2, 0x0f, 0xfa, 0x01, 0x32, 0x34, 0xf9, 0x8c, 0x9c, 0xd3, 0xe9, 0x02, 0xa4,
		0xe8, 0xc8, 0x09, 0x21, 0x3a, 0x93, 0x39, 0x3a, 0xdc, 0xb4, 0x9e, 0xdc, 0x14, 0x47, 0x40, 0x90,
		0x44, 0x46, 0x46, 0x46, 0x88, 0x32, 0xe8, 0xe7, 0x96, 0x95, 0xa3, 0x34, 0x81, 0x21, 0xdc, 0x39,
		0xe9, 0x49, 0x4c, 0x1a, 0x57, 0xe8, 0xc3, 0x6b, 0x25, 0x02, 0x20, 0xc1, 0x48, 0xad, 0x24, 0xdd,
		0x7b, 0x7e, 0x20, 0x2a, 0xb0, 0x2a, 0x97, 0xdc, 0xe3, 0x75, 0x78, 0x13, 0x60, 0xdf, 0x97, 0x5b,
		0x44, 0xf8, 0x38, 0x1e, 0x56, 0x33, 0x88, 0x32, 0x87, 0x54, 0x15, 0x74, 0x0e, 0x60, 0x00, 0x00,
		0x05, 0x3f, 0x00, 0x01, 0x00, 0x1a, 0x72, 0x72, 0x00, 0x00, 0x03, 0x84, 0x5c, 0xaa, 0x4c, 0xbc,
		0x99, 0x51, 0x14, 0x9c, 0xad, 0x46, 0x50, 0x52, 0x0a, 0xb4, 0x0f, 0xdf, 0x86, 0x6b, 0x43, 0x61,
		0x74, 0x17, 0xeb, 0x19, 0x72, 0xe3, 0xa2, 0x65, 0xea, 0x88, 0x88, 0xa8, 0x88, 0xb4, 0x11, 0xa0,
		0xba, 0x3c, 0x50, 0x45, 0xe7, 0x0e, 0xc7, 0x83, 0x44, 0xc9, 0xcf, 0xa2, 0x67, 0x69, 0xa3, 0xde,
		0x4e, 0xad, 0x41, 0x60, 0x89, 0x4e, 0x5a, 0xe8, 0xaa, 0xaa, 0x9c, 0xce, 0x53, 0x2a, 0x79, 0x49,
		0xa9, 0xc2, 0x3f, 0xa6, 0x7e, 0xea, 0x1c, 0xeb, 0x45, 0x44, 0x48, 0x50, 0x5a, 0x9c, 0x4e, 0xb6,
		0xc2, 0xfd, 0x3e, 0x73, 0xe1, 0x92, 0x14, 0x46, 0x74, 0xe2, 0xca, 0x3e, 0x47, 0xc9, 0xf9, 0x70,
		0x20, 0x4e, 0xe4, 0x64, 0x11, 0x5a, 0xb3, 0x85, 0x7c, 0x9c, 0xb2, 0x19, 0xaa, 0x87, 0x0a, 0x46,
		0xc2, 0xfe, 0x2f, 0xf2, 0x5e, 0xfd, 0x22, 0x58, 0x56, 0x0b, 0xb1, 0xcf, 0x3e, 0x80, 0x68, 0x04,
		0x22, 0x5c, 0xf4, 0x4a, 0x50, 0xad, 0x20, 0x69, 0x9b, 0x53, 0x08, 0x8a, 0x9d, 0x2b, 0x52, 0x73,
		0x62, 0x62, 0x1c, 0xd6, 0x95, 0x64, 0x4f, 0x2f, 0x46, 0x7c, 0x41, 0xa8, 0x34, 0x77, 0x88, 0x14,
		0x2e, 0xfe, 0x15, 0xf6, 0x4d, 0x3d, 0xbe, 0x2d, 0x33, 0x2a, 0x10, 0x9a, 0x86, 0xa6, 0x7f, 0x7e,
		0xf5, 0x44, 0x5a, 0x55, 0x79, 0xa8, 0x89, 0x91, 0x34, 0x79, 0xac, 0xbf, 0xc5, 0x2a, 0x5e, 0x0f,
		0x04, 0x60, 0xe4, 0xe3, 0x77, 0x6f, 0xe7, 0xec, 0x11, 0x11, 0x11, 0x11, 0xc5, 0x61, 0x92, 0x6d,
		0xbf, 0xc4, 0x1a, 0x40, 0x50, 0x3e, 0x54, 0x8f, 0x26, 0x8c, 0xd5, 0xba, 0xc0, 0x50, 0x6a, 0xe7,
		0x8e, 0x35, 0xcd, 0xcd, 0x11, 0x63, 0x0d, 0xc9, 0x3f, 0x74, 0x02, 0x51, 0x23, 0x32, 0xd1, 0x71,
		0x23, 0x49, 0x1b, 0x3b, 0xc2, 0x01, 0x56, 0x31, 0x48, 0xfe, 0xd3, 0x6b, 0x12, 0x87, 0x1a, 0x7c,
		0xf3, 0x3f, 0x25, 0x86, 0x90, 0x12, 0x3a, 0x08, 0xcd, 0xf3, 0xc4, 0x59, 0x23, 0x20, 0x46, 0x26,
		0xfe, 0x7f, 0x3f, 0xb4, 0x44, 0x82, 0x24, 0xa6, 0xcb, 0xa2, 0x1b, 0xa8, 0x83, 0x70, 0xff, 0x57,
		0x20, 0x86, 0x31, 0xc2, 0x33, 0xad, 0xa2, 0x04, 0x56, 0x21, 0x16, 0x81, 0x46, 0x2d, 0x4e, 0x17,
		0xc0, 0xf0, 0x76, 0xe0, 0x13, 0x8e, 0xfc, 0xb9, 0xd0, 0x55, 0x0d, 0xf0, 0x26, 0xf7, 0x58, 0xc3,
		0xcd, 0xb8, 0x72, 0xe3, 0x6a, 0x7e, 0xec, 0xf6, 0x3e, 0xa5, 0x19, 0xd7, 0x0f, 0xd0, 0xad, 0x34,
		0x6e, 0x7f, 0x7c, 0x69, 0xcc, 0xe0, 0x3e, 0xb1, 0x41, 0x2d, 0x9a, 0xb0, 0x08, 0x56, 0x30, 0xa0,
		0xdd, 0xcf, 0xdf, 0x0e, 0x6a, 0xe8, 0x44, 0xa1, 0x91, 0xe0, 0xd3, 0x25, 0x04, 0xb9, 0xd5, 0x43,
		0x26, 0xf3, 0x05, 0xa0, 0x67, 0x16, 0x62, 0xf7, 0x44, 0x4b, 0xa0, 0xa5, 0x04, 0x06, 0xa0, 0x59,
		0x65, 0x06, 0x14, 0x13, 0x43, 0x2a, 0xb3, 0x18, 0xb9, 0x36, 0x42, 0x7a, 0xbe, 0x50, 0x7f, 0x34,
		0x4e, 0xed, 0x17, 0x9c, 0x19, 0x6e, 0x38, 0x9a, 0x73, 0x0c, 0xbe, 0x6e, 0x4d, 0x90, 0x2a, 0xef,
		0x8b, 0xdd, 0xba, 0x08, 0x4e, 0xed, 0x23, 0x6e, 0x2e, 0xf7, 0x85, 0x08, 0x83, 0x42, 0x8b, 0x42,
		0x25, 0x2e, 0x41, 0x14, 0xd5, 0xf2, 0x9d, 0x49, 0x61, 0xa8, 0xcc, 0xf5, 0x15, 0x0a, 0x42, 0x35,
		0x5e, 0x9b, 0x9f, 0x3d, 0x48, 0xa6, 0x74, 0x64, 0x08, 0x8a, 0xdb, 0x74, 0x16, 0xa8, 0x19, 0xf4,
		0xba, 0xcd, 0x44, 0x48, 0x50, 0x55, 0x21, 0x4d, 0x19, 0xe8, 0xd0, 0x86, 0x99, 0xeb, 0x70, 0xe7,
		0x13, 0xae, 0x00, 0xb2, 0x53, 0xfe, 0xff, 0xe2, 0x2b, 0x61, 0xeb, 0x49, 0x35, 0x57, 0xd6, 0x53,
		0x33, 0xf4, 0x64, 0x13, 0x3a, 0x44, 0x67, 0xbc, 0x08, 0x87, 0x10, 0x86, 0xb8, 0x41, 0x90, 0x06,
		0x53, 0xc8, 0x74, 0x3a, 0x83, 0x2a, 0x14, 0x36, 0x18, 0x40, 0x83, 0x52, 0x0d, 0x24, 0x60, 0x95,
		0x08, 0x65, 0xc3, 0x43, 0x06, 0x67, 0x72, 0xe6, 0xe4, 0x52, 0xb0, 0xec, 0xb8, 0x6c, 0x1b, 0x4b,
		0xf9, 0x59, 0xa0, 0x40, 0x59, 0xc8, 0x80, 0x1c, 0xd4, 0x04, 0x05, 0xbd, 0x11, 0x1d, 0x6b, 0x9f,
		0x04, 0xb5, 0x45, 0x59, 0x18, 0x93, 0x8f, 0xa1, 0x2c, 0xce, 0xc6, 0x81, 0xd9, 0xc8, 0x94, 0xf9,
		0xf7, 0xcb, 0x33, 0x33, 0x6a, 0x82, 0x70, 0xf5, 0x44, 0xbf, 0x67, 0xb3, 0x87, 0xa9, 0x7d, 0xa8,
		0xc3, 0x17, 0xd7, 0x03, 0xea, 0xd9, 0xf6, 0x43, 0x7e, 0xee, 0xaa, 0x9a, 0x46, 0x96, 0x53, 0x8a,
		0xd3, 0xed, 0xbf, 0x24, 0x68, 0xcc, 0xbc, 0x33, 0xb0, 0x47, 0x1e, 0xce, 0x94, 0x18, 0x91, 0x98,
		0x84, 0x68, 0xf6, 0xf4, 0xb0, 0xdc, 0xc2, 0x5b, 0x4d, 0xcc, 0x68, 0xa5, 0x5f, 0x4f, 0x07, 0xb8,
		0x6a, 0x68, 0xfd, 0xd5, 0x57, 0x74, 0xf1, 0xc9, 0x7d, 0x13, 0x4b, 0x57, 0x0c, 0xb4, 0x6d, 0x16,
		0xd9, 0x3f, 0x8f, 0x86, 0x2c, 0x2c, 0x20, 0x11, 0x19, 0xd9, 0xcd, 0x11, 0x43, 0x69, 0x41, 0xe6,
		0xeb, 0xe5, 0xf2, 0xb8, 0x6f, 0x79, 0xd4, 0xe9, 0xd9, 0x99, 0x54, 0xcd, 0x98, 0x5f, 0xaf, 0x0c,
		0xda, 0x34, 0xe1, 0xa5, 0xa2, 0x00, 0x91, 0x91, 0x16, 0x42, 0xdc, 0xeb, 0x4c, 0xd8, 0x53, 0xad,
		0x12, 0x32, 0xf0, 0xa7, 0x62, 0x2a, 0xa6, 0x28, 0x91, 0xa0, 0x8c, 0x48, 0xe8, 0xf1, 0x11, 0x23,
		0xcd, 0x13, 0xf7, 0xe8, 0xd4, 0x12, 0xdb, 0x45, 0x97, 0x69, 0xed, 0x8a, 0xdb, 0x22, 0x1f, 0xc8,
		0x7e, 0x90, 0xc4, 0x13, 0x3a, 0x06, 0xef, 0x2b, 0x76, 0x68, 0xa5, 0x53, 0xde, 0x22, 0x21, 0x01,
		0x0a, 0x22, 0x6e, 0x54, 0x40, 0x24, 0x11, 0xad, 0x28, 0xd3, 0xd0, 0x56, 0x59, 0x7f, 0xdf, 0x81,
		0x1d, 0x7d, 0xe4, 0xef, 0xd7, 0x04, 0xc8, 0x6f, 0x82, 0x3d, 0x35, 0x6a, 0xa6, 0xda, 0x4b, 0x92,
		0xc2, 0xfa, 0x71, 0x9b, 0xba, 0xbb, 0x70, 0xfc, 0x0f, 0x36, 0xa3, 0xfb, 0xe7, 0x4b, 0x17, 0xf0,
		0x7d, 0x05, 0xc5, 0x2a, 0x9b, 0xbc, 0x63, 0xdf, 0x20, 0x9f, 0xee, 0xad, 0x1a, 0x50, 0x60, 0x51,
		0x93, 0x54, 0xf0, 0xbd, 0x45, 0x34, 0x58, 0x54, 0x6c, 0xb8, 0xa9, 0xb9, 0x2b, 0x30, 0xca, 0xa9,
		0xd3, 0x3b, 0x1d, 0x61, 0x8c, 0xef, 0xac, 0x50, 0x7e, 0x30, 0x95, 0x46, 0x01, 0x4f, 0x7f, 0xa1,
		0x21, 0x3a, 0x91, 0x50, 0x9c, 0xeb, 0x32, 0x48, 0xc4, 0x1c, 0x68, 0xcb, 0x69, 0x1c, 0xf8, 0xd6,
		0xe1, 0x46
	};

	char packet2[] = {
		0xf8, 0x0f, 0x41, 0x0d, 0x5e, 0x0f, 0x90, 0x94, 0xe4, 0xa7, 0x5c, 0x86, 0x08, 0x00, 0x45, 0x00,
		0x00, 0x1c, 0x8d, 0x36, 0x00, 0xb8, 0x74, 0x06, 0xa6, 0xde, 0x3b, 0x2a, 0x15, 0x62, 0xc0, 0xa8,
		0x00, 0xdb, 0x4e, 0x9a, 0x41, 0x54, 0x0d, 0x24, 0x61, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x86, 0xcf, 0x6c
	};

	PktInfoSP pkt_info_1(new PktInfo(2048));
	std::memcpy(pkt_info_1->pkt.buf, packet1, 1506);
	pkt_info_1->pkt.len = 1506;

	Ipv4MonitorType ipv4_monitor;
	Ipv4FragReassembler reassembler(&ipv4_monitor, pkt_info_1);

	ASSERT_TRUE(ParsePktEthInfo(pkt_info_1));
	ASSERT_TRUE(ParsePktIpInfo(false, pkt_info_1));

	reassembler.ProcessFragPkt(pkt_info_1);

	ASSERT_TRUE(reassembler.pkt_frags_.size() == 1);

	//delete[] pkt_info_1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	PktInfoSP pkt_info_2(new PktInfo(1024));
	std::memcpy(pkt_info_2->pkt.buf, packet2, 60);
	pkt_info_2->pkt.len = 60;

	ASSERT_TRUE(ParsePktEthInfo(pkt_info_2));
	ASSERT_TRUE(ParsePktIpInfo(false, pkt_info_2));

	reassembler.ProcessFragPkt(pkt_info_2);

	ASSERT_TRUE(reassembler.pkt_frags_.size() == 2);
}

#if 0
/*------------------------------------------------------------------------------
 * 描述: 解析处理Ip分片报文 - 新报文起始地址 等于 老报文终结地址
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_6)
{
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpMfFlag(true);
	ip_constructor1.SetIpId(0x20);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(!ip_monitor_.ip_frags_.empty());

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(30);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpOffSet(50);
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpMfFlag(true);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 2);  //此时容器中应该有2个分片
	
	auto iter = pkt_iter->entry.frags.begin();
	ASSERT_TRUE(iter->data.size() == 50);  //此时后面的分片的数据长度应为50
	
	iter++;
	
	ASSERT_TRUE(iter->data.size() == 50);  //此时后面的分片的数据长度应为50

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;
}

/*------------------------------------------------------------------------------
 * 描述: 解析处理Ip分片报文 - 总长度大于MTU   由于eth最大数据1500，难以构造出65000的包
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_7)
{
	DummyConstructor dummy_constructor1(50);  //65000

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpMfFlag(true);
	ip_constructor1.SetIpId(0x20);
	ip_constructor1.SetIpOffSet(50);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	//ASSERT_TRUE(!ip_monitor_.ip_frags_.empty()); //此包会被丢弃

	ip_monitor_.ip_frags_.clear();

	delete[] info1->pkt.buf;

}

/*------------------------------------------------------------------------------
 * 描述: 解析处理Ip分片报文 - 重复收到首报文
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_8)
{	
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpMfFlag(true);
	ip_constructor1.SetIpId(0x20);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view1 = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter1 = frag_id_view1.begin();

	ASSERT_TRUE(pkt_iter1->entry.frags.size() == 1);  //此时容器中应该有1个分片

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////
	
	DummyConstructor dummy_constructor2(40);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpMfFlag(true);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 1);  //此时容器中应该有1个分片

	auto iter = pkt_iter->entry.frags.begin();
	ASSERT_TRUE(iter->data.size() == 50);  //此时分片的数据长度应为50 

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;
}

/*------------------------------------------------------------------------------
 * 描述: 解析处理Ip分片报文 - 重复收到尾报文
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_9)
{
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpOffSet(30);
	ip_constructor1.SetIpId(0x20);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view1 = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter1 = frag_id_view1.begin();

	ASSERT_TRUE(pkt_iter1->entry.frags.size() == 1);  //此时容器中应该有1个分片

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(40);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpOffSet(40);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 1);  //此时容器中应该有1个分片

	auto iter = pkt_iter->entry.frags.begin();
	ASSERT_TRUE(iter->data.size() == 50);  //此时分片的数据长度应为60 

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;
	
}


/*------------------------------------------------------------------------------
 * 描述: 解析处理重复的Ip分片报文 - 新报文的终结地址不大于老报文的起始地址
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_10)
{
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpOffSet(100);
	ip_constructor1.SetIpId(0x20);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view1 = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter1 = frag_id_view1.begin();

	ASSERT_TRUE(pkt_iter1->entry.frags.size() == 1);  //此时容器中应该有1个分片

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(40);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpMfFlag(true);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 2);  //此时容器中应该有2个分片

	auto iter = pkt_iter->entry.frags.begin();
	ASSERT_TRUE(iter->data.size() == 60);  //此时分片的数据长度应为60

	iter++;
	ASSERT_TRUE(iter->data.size() == 50);  //此时分片的数据长度应为50

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;
}

/*------------------------------------------------------------------------------
 * 描述: 解析处理重复的Ip分片报文 - 新报文包含老报文
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_11)
{
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpOffSet(10);
	ip_constructor1.SetIpId(0x20);
	ip_constructor1.SetIpMfFlag(true);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view1 = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter1 = frag_id_view1.begin();

	ASSERT_TRUE(pkt_iter1->entry.frags.size() == 1);  //此时容器中应该有1个分片

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(40);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpMfFlag(true);
	ip_constructor2.SetIpOffSet(5);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 1);  //此时容器中应该有1个分片
	
	auto iter = pkt_iter->entry.frags.begin();

	LOG(INFO) << "DATA SIZE: " << iter->data.size();
	ASSERT_TRUE(iter->data.size() == 60);  //此时后面的分片的数据长度应为60

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;
}

/*------------------------------------------------------------------------------
 * 描述: 解析处理重复的Ip分片报文 - 原报文包含新报文
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_12)
{
	DummyConstructor dummy_constructor1(60);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpId(0x20);
	ip_constructor1.SetIpMfFlag(true);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view1 = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter1 = frag_id_view1.begin();

	ASSERT_TRUE(pkt_iter1->entry.frags.size() == 1);  //此时容器中应该有1个分片

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(20);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpMfFlag(true);
	ip_constructor2.SetIpOffSet(10);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 1);  //此时容器中应该有1个分片
	
	auto iter = pkt_iter->entry.frags.begin();

	LOG(INFO) << "DATA SIZE: " << iter->data.size();
	ASSERT_TRUE(iter->data.size() == 80);  //此时后面的分片的数据长度应为50

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;

}


/*------------------------------------------------------------------------------
 * 描述: 解析处理重复的Ip分片报文 - 原报文右相交新报文
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_13)
{
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());
	ip_constructor1.SetIpMfFlag(true);
	ip_constructor1.SetIpId(0x20);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view1 = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter1 = frag_id_view1.begin();

	ASSERT_TRUE(pkt_iter1->entry.frags.size() == 1);  //此时容器中应该有1个分片

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(30);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpMfFlag(true);
	ip_constructor2.SetIpOffSet(10);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 2);  //此时容器中应该有2个分片

	auto iter = pkt_iter->entry.frags.begin();

	LOG(INFO) << "DATA SIZE: " << iter->data.size();
	ASSERT_TRUE(iter->data.size() == 10);  //此时第一分片长度为10

	iter++;
	ASSERT_TRUE(iter->data.size() == 50);  //此时第一分片长度为50

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;
}

/*------------------------------------------------------------------------------
 * 描述: 解析处理重复的Ip分片报文 - 原报文左相交新报文
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_14)
{
	DummyConstructor dummy_constructor1(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor1.GetIpLayer());

	ip_constructor1.SetIpMfFlag(true);
	ip_constructor1.SetIpId(0x20);
	ip_constructor1.SetIpOffSet(30);

	PktInfoSP info1(new PktInfo);
	dummy_constructor1.GetPacket((void**)(&(info1->pkt.buf)), (size_t*)(&(info1->pkt.len)));

	ParsePktEthInfo(info1);
	VoidSP void_info1 = VOID_SHARED(info1);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info1) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view1 = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter1 = frag_id_view1.begin();

	ASSERT_TRUE(pkt_iter1->entry.frags.size() == 1);  //此时容器中应该有1个分片

	delete[] info1->pkt.buf;

	//////////////////////////////////////////////////////////////////////////////

	DummyConstructor dummy_constructor2(30);

	IpConstructor& ip_constructor2 = *(dummy_constructor2.GetIpLayer());
	ip_constructor2.SetIpId(0x20);
	ip_constructor2.SetIpMfFlag(true);

	PktInfoSP info2(new PktInfo);
	dummy_constructor2.GetPacket((void**)(&(info2->pkt.buf)), (size_t*)(&(info2->pkt.len)));

	ParsePktEthInfo(info2);
	VoidSP void_info2 = VOID_SHARED(info2);

	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info2) == PI_RET_STOP);
	ASSERT_TRUE(ip_monitor_.ip_frags_.size() == 1);

	IpMonitor::FragIdView& frag_id_view = ip_monitor_.ip_frags_.get<0>();
	IpMonitor::FragPkMapIter pkt_iter = frag_id_view.begin();

	ASSERT_TRUE(pkt_iter->entry.frags.size() == 2);  //此时容器中应该有2个分片
	
	auto iter = pkt_iter->entry.frags.begin();
	ASSERT_TRUE(iter->data.size() == 50);  //此时后面的分片的数据长度应为50

	iter++;
	ASSERT_TRUE(iter->offset == 50);  //此时后面的分片的数据长度应为50
	ASSERT_TRUE(iter->data.size() == 30);  //此时后面的分片的数据长度应为30

	ip_monitor_.ip_frags_.clear();

	delete[] info2->pkt.buf;

}


/*------------------------------------------------------------------------------
 * 描述: 解析处理重复的Ip分片报文 - 定时器生效
 *----------------------------------------------------------------------------*/
TEST_F(IpMonitorTest, IpMonitorTest_Normal_15)
{
	DummyConstructor dummy_constructor(30);

	IpConstructor& ip_constructor1 = *(dummy_constructor.GetIpLayer());

	ip_constructor1.SetIpMfFlag(true);
	ip_constructor1.SetIpId(0x20);
	ip_constructor1.SetIpOffSet(30);
	
	PktInfoSP info(new PktInfo);
	dummy_constructor.GetPacket((void**)(&(info->pkt.buf)), (size_t*)(&(info->pkt.len)));
	
	ParsePktEthInfo(info);
	VoidSP void_info = VOID_SHARED(info);
	
	ASSERT_TRUE(ip_monitor_.DoProcess(MSG_PKT, void_info) == PI_RET_STOP);
	ASSERT_TRUE(!ip_monitor_.ip_frags_.empty());

	boost::this_thread::sleep(boost::posix_time::seconds(5));

	ASSERT_TRUE(ip_monitor_.ip_frags_.empty());

	ip_monitor_.ip_frags_.clear();

	delete[] info->pkt.buf;
}
#endif

}
